# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'My_Lab_Notebook.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1223, 890)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Calendar = QtWidgets.QCalendarWidget(self.centralwidget)
        self.Calendar.setGeometry(QtCore.QRect(220, 90, 991, 741))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.Calendar.setFont(font)
        self.Calendar.setVerticalHeaderFormat(QtWidgets.QCalendarWidget.NoVerticalHeader)
        self.Calendar.setObjectName("Calendar")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 10, 221, 831))
        
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.frame.setFont(font)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.Protocol_button = QtWidgets.QPushButton(self.frame)
        self.Protocol_button.setGeometry(QtCore.QRect(0, 80, 221, 81))
        self.Protocol_button.setObjectName("Protocol_button")
        self.Receipe_Button = QtWidgets.QPushButton(self.frame)
        self.Receipe_Button.setGeometry(QtCore.QRect(0, 160, 221, 81))
        self.Receipe_Button.setObjectName("Receipe_Button")
        self.Experiment_button = QtWidgets.QPushButton(self.frame)
        self.Experiment_button.setGeometry(QtCore.QRect(0, 240, 221, 81))
        self.Experiment_button.setObjectName("Experiment_button")
        self.To_do_list = QtWidgets.QLabel(self.frame)
        self.To_do_list.setGeometry(QtCore.QRect(10, 390, 131, 51))
        self.To_do_list.setObjectName("To_do_list")
        self.main_title = QtWidgets.QLabel(self.centralwidget)
        self.main_title.setGeometry(QtCore.QRect(360, 0, 781, 81))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(48)
        self.main_title.setFont(font)
        self.main_title.setObjectName("main_title")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1223, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Calendar.activated.connect(self.click_on_calendar)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Protocol_button.setText(_translate("MainWindow", "Protocols"))
        self.Receipe_Button.setText(_translate("MainWindow", "Receipes"))
        self.Experiment_button.setText(_translate("MainWindow", "Experiments"))
        self.To_do_list.setText(_translate("MainWindow", "TO DO : "))
        self.main_title.setText(_translate("MainWindow", "MY LAB NOTEBOOK"))

    def click_on_calendar(self) :
        date = self.Calendar.selectedDate()
        print(str(date.day()) + str(date.month())+ str(date.year()))
        self.w = JournalWindow(date)
        
        self.w.show()



class JournalWindow(QtWidgets.QMainWindow):
    """
    This window will serve as a markdown editor, that we will be able to save
    """
    def __init__(self,date):
        super().__init__()
        self.label = QtWidgets.QLabel("Another Window")
        self.setObjectName(str(date.day())+"-" + str(date.month())+"-" +str(date.year()))
        self.day = date.day()
        self.month = date.month()
        self.year = date.year()
        self.resize(600, 1000)
        self.textEditor = QtWidgets.QTextEdit(self)
        self.textEditor.resize(600,1000)
        self.textEditor.setFontPointSize(16) 
        self.setWindowTitle(str(self.day)+"-" + str(self.month)+"-" +str(self.year))
        self.saveButton = QtWidgets.QPushButton(self)
        self.saveButton.resize(70,50)
        self.saveButton.setText("Save")
        self.saveButton.setGeometry(QtCore.QRect(530,950,70,50))
        self.load_markdown()
        self.saveButton.clicked.connect(self.save_markdown)

    def save_markdown(self):
        # Open a file dialog to choose save location
        dir_path = "Journal/" +str(self.year) + "/" + str(self.month) + "/" + str(self.day)
        file_path = dir_path +"/main_text.md"
            # Save the content of QTextEdit to the file
        with open(file_path, "w", encoding="utf-8") as file:
            file.write(self.textEditor.toPlainText())

    def load_markdown(self):

        """
        This function will be used to open existing markdowns corresponding to the days of the journal
        If no md is associated with the day, it create a file corresponding to this day
        """

        dir_path = "Journal/" +str(self.year) + "/" + str(self.month) + "/" + str(self.day)
        print(dir_path)
        if not os.path.exists(dir_path):
            os.makedirs(dir_path,exist_ok=True)
            return
        
        file_path = dir_path +"/main_text.md"

        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as file:
                markdown_text = file.read()
                self.textEditor.setPlainText(markdown_text)

        return


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
